# GameThrive iOS SDK API

List of Methods
----------
- [`initWithLaunchOptions`](#initWithLaunchOptions)
- [`registerForPushNotifications`](#registerForPushNotifications)
- [`sendTag`](#sendTag)
- [`sendTags`](#sendTags)
- [`getTags`](#getTags)
- [`deleteTag`](#deleteTag)
- [`deleteTags`](#deleteTags)
- [`sendPurchase`](#sendPurchase)
- [`idsAvailable`](#idsAvailable)

List of Block Callbacks
-----
- [`GTHandleNotificationBlock`](#GTHandleNotificationBlock)
- [`GTResultSuccessBlock`](#GTResultSuccessBlock)
- [`GTFailureBlock`](#GTFailureBlock)
- [`GTIdsAvailableBlock`](#GTIdsAvailableBlock)

## Methods
<a name="initWithLaunchOptions" />
#### initWithLaunchOptions
Must be called from `didFinishLaunchingWithOptions` in `AppDelegate.m`. Instead of passing in appId here you can also add GameThrive_APPID as a key in your plist file and place your GameThrive app Id as a value there.

- __Parameters__
 - __`NSDictionary*` _launchOptions___ - launchOptions that you received from didFinishLaunchingWithOptions
 - __`NSString*` _appId___ - Your GameThrive app id found on the settings page at gamethrive.com.
 - __[`GTHandleNotificationBlock`](#GTHandleNotificationBlock) _callback(Optional)___ - Function to be called when a notification is opened or received while the app is in use.
 - __`BOOL` _autoRegister(Optional)___ -   Default true. Automatically show the iOS system prompt to accept push notifications. You can pass in false to delay this pop-up and then call `registerForPushNotifications` to prompt them later.

- __Example__

	````objective-c
	- (BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary*)launchOptions {
    		self.gameThrive = [[GameThrive alloc] initWithLaunchOptions:launchOptions handleNotification:^(NSString* message, NSDictionary* additionalData, BOOL isActive) {
    		}];
	}
	````

<a name="registerForPushNotifications" />
#### registerForPushNotifications
Call when you want to prompt the user to accept push notifications. Only call once and only if you passed false to `initWithLaunchOptions autoRegister:`.

- __Example__

	````objective-c
	[gameThrive registerForPushNotifications];
	````

<a name="sendTag" />
#### sendTag
Tag a player based on a game event of your choosing so later you can create segments on [gamethrive.com](https://gamethrive.com) to target these players. Recommend using sendTags over sendTag if you need to set more than one tag on a player at a time.

- __Parameters__
 - __`NSString*` _key___ - Key of your choosing to create or update.
 - __`NSString*` _value___ -  Value to set on the key.
   - _NOTE:_ Passing in a blank String deletes the key, you can also call deleteTag or deleteTags.
 - __`GTResultSuccessBlock` _onSuccess(Optional)___ -  Call if there were no errors sending the tag.
 - __`GTFailureBlock` _onFailure(Optional)___ -  Called if there was an error.


- __Example__

	````objective-c
	[gameThrive sendTag:@"key" value:@"value"];
	````

<a name="sendTags" />
#### sendTags
Tag a player based on a game event of your choosing so later you can create segments on [gamethrive.com](https://gamethrive.com) to target these players.

- __Parameters__
 - __`NSDictionary*` _keyValues___ - Key value pairs of your choosing to create or update.
   - _NOTE:_ Passing in a blank `NSString*` as a value deletes the key, you can also call `deleteTag` or `deleteTags`.
 - __`GTResultSuccessBlock` _onSuccess(Optional)___ -  Call if there were no errors sending the tag.
 - __`GTFailureBlock` _onFailure(Optional)___ -  Called if there was an error.

 
- __Example__

	````objective-c
	[gameThrive sendTags:(@{@"key1" : @"value1", @"key2" : "value2"}];
	````

<a name="getTags" />
#### getTags
Retrieve a list of tags that have been set on the player from the GameThrive server.

- __Parameters__
 - __`GTResultSuccessBlock` _successBlock___ - Called when tags are received from GameThrive's server.
 - __`GTFailureBlock` _onFailure(Optional)___ -  Called if there was an error.

 
- __Example__

	````objective-c
	[gameThrive getTags:^(NSDictionary* result) {
		NSLog(@"%@", result);
	}];
	````

<a name="deleteTag" />
#### deleteTag
Deletes a tag that was previously set on a player with `sendTag` or `sendTags`. Use `deleteTags` if you need to delete more than one.

- __Parameters__
 - __`NSString*` _key___ - Key to remove.
 - __`GTResultSuccessBlock` _onSuccess(Optional)___ -  Call if there were no errors.
 - __`GTFailureBlock` _onFailure(Optional)___ -  Called if there was an error.
   
 
- __Example__

	````objective-c
	[gameThrive deleteTag:@"key"];
	````

<a name="deleteTags" />
#### deleteTags
Deletes tags that were previously set on a player with `sendTag` or `sendTags`.

- __Parameters__
 - __`NSArray*` _keys___ - Keys to remove.
 - __`GTResultSuccessBlock` _onSuccess(Optional)___ -  Call if there were no errors.
 - __`GTFailureBlock` _onFailure(Optional)___ -  Called if there was an error.
   
 
- __Example__

	````objective-c
	[gameThrive sendTags:@[@"key1", @"key2"]];
	````

<a name="sendPurchase" />
#### sendPurchase
Call this method when a user completes an in-app purchase, and provide the amount spent in USD. This can later be used to target free vs paid users when sending a push notification.

- __Parameters__
 - __NSNumber* _amount___ - Amount spent in USD.
   
- __Example__

	````objective-c
	[gameThrive sendPurchase:[NSNumber numberWithDouble:12.34]];
	````


<a name="IdsAvailable" />
#### IdsAvailable
Lets you retrieve the GameThrive player id and push token. Your callback block is called after the device is successfully registered with GameThrive. pushToken will be nil if the user did not accept push notifications.

- __Parameters__
 - __`GTIdsAvailableBlock`  _idsAvailableBlock___ -  Called when the player id is available.

- __Example__

	````objective-c
	[gameThrive IdsAvailable:^(NSString* playerId, NSString* pushToken) {
		NSLog(@"PlayerId:%@", playerId);
		if (pushToken != nil)
			NSLog(@"pushToken:", pushToken);
	}];
	````

## Block Callbacks

<a name="GTHandleNotificationBlock" />
#### GTHandleNotificationBlock
Block for GameThrive methods that gets called when the GameThrive server is contacted successfully.

   -  __Parameters__
     - __`NSString*` _result___ - The resulting JSON response from the GameThrive server.
 
- __Example__

	````objective-c
	[gameThrive getTags:^(NSDictionary* result) {
		NSLog(@"%@", result);
	}];
	````

<a name="GTResultSuccessBlock" />
#### GTResultSuccessBlock
Block for GameThrive methods that gets called when the GameThrive server is contacted successfully.

   -  __Parameters__
     - __`NSDictionary*` _message___ - Visable text the user seen on the push notification itself.
     - __`NSDictionary*` _additionalData___ - Key value pairs set on the additional data section on gamethrive.com.
     	NOTE: If you set Action Buttons on your notifications the actionSelected key will contain the id of the button pressed.
     - __`BOOL` _isActive___ - True if user is currently using your app when the notification came in.
 
- __Example__

	````objective-c
	self.gameThrive = [[GameThrive alloc] initWithLaunchOptions:launchOptions handleNotification:^(NSString* message, NSDictionary* additionalData, BOOL isActive) {
	        UIAlertView* alertView;
	        
	        NSLog(@"APP LOG ADDITIONALDATA: %@", additionalData);
	        
	        if (additionalData) {
	            // Append AdditionalData at the end of the message
	            NSString* displayMessage = [NSString stringWithFormat:@"NotificationMessage:%@", message];
	            
	            NSString* messageTitle;
	            if (additionalData[@"discount"])
	                messageTitle = additionalData[@"discount"];
	            else if (additionalData[@"bonusCredits"])
	                messageTitle = additionalData[@"bonusCredits"];
	            else if (additionalData[@"actionSelected"])
	                messageTitle = [NSString stringWithFormat:@"Pressed ButtonId:%@", additionalData[@"actionSelected"]];
	            
	            alertView = [[UIAlertView alloc] initWithTitle:messageTitle
	                                                   message:displayMessage
	                                                  delegate:self
	                                         cancelButtonTitle:@"Close"
	                                         otherButtonTitles:nil, nil];
	        }
	        
	        // If a push notification is received when the app is being used it does not go to the notifiction center so display in your app.
	        if (alertView == nil && isActive) {
	            alertView = [[UIAlertView alloc] initWithTitle:@"GameThrive Message"
	                                                   message:message
	                                                  delegate:self
	                                         cancelButtonTitle:@"Close"
	                                         otherButtonTitles:nil, nil];
	        }
	        
	        // Highly recommend adding game logic around this so the user is not interrupted during gameplay.
	        if (alertView != nil)
	            [alertView show];

    	}];

	````

<a name="GTFailureBlock" />
#### GTFailureBlock
Block for GameThrive methods that gets called when the GameThrive server can't be contacted or there was a error in the response.

   - __Parameters__
     - __`NSError*` _error___ - errorWithDomain == "GTError", code  == HTTP error code from the GameThrive server, userInfo == JSON GameThrive responded with.
   
 
- __Example__

	````objective-c
	[self.gameThrive registerDeviceToken:deviceToken onSuccess:^(NSDictionary* results) {
		NSLog(@"Device Registered with GameThrive.");
	} onFailure:^(NSError* error) {
		NSLog(@"Error in GameThrive Registration: %@", error);
	}];
	````

<a name="GTIdsAvailableBlock" />
#### GTIdsAvailableBlock
Lets you retrieve the GameThrive player id and device token. Your block is called after the device is successfully registered with GameThrive.

   - __Parameters__
     - __`NSString*` _playerId___ - GameThrive playerId is a UUID formatted string.(_unique per device per app_)
     - __`NSString*` _registrationId___ - pushToken is a Apple assigned identifier(_unique per device per app_).
      - _NOTE:_ Might be `nil` if the user does not accept push notifications for your app or there was a connection issue.
   
 
- __Example__

	````objective-c
	[gameThrive IdsAvailable:^(NSString* playerId, NSString* pushToken) {
		NSLog(@"PlayerId:%@", playerId);
		if (pushToken != nil)
			NSLog(@"pushToken:", pushToken);
	}];
	````
	
